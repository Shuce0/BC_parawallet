var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { getBaseMPCNetworkUrl, WalletScheme, WalletType } from '@getpara/core-sdk';
const configCGGMPBase = (serverUrl, walletId, id) => `{"ServerUrl":"${serverUrl}", "WalletId": "${walletId}", "Id":"${id}", "Ids":["USER","CAPSULE"], "Threshold":1}`;
const configDKLSBase = (walletId, id, disableWebSockets) => `{"walletId": "${walletId}", "id":"${id}", "otherId":"CAPSULE", "isReceiver": false, "disableWebSockets": ${disableWebSockets}}`;
function keygenRequest(ctx, userId, walletId, protocolId) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data } = yield ctx.mpcComputationClient.post('/wallets', {
            userId,
            walletId,
            protocolId,
        });
        return data;
    });
}
function signMessageRequest(ctx, userId, walletId, protocolId, message, signer) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data } = yield ctx.mpcComputationClient.post(`/wallets/${walletId}/messages/sign`, {
            userId,
            protocolId,
            message,
            signer,
        });
        return data;
    });
}
function sendTransactionRequest(ctx, userId, walletId, protocolId, transaction, signer, chainId) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data } = yield ctx.mpcComputationClient.post(`/wallets/${walletId}/transactions/send`, {
            userId,
            protocolId,
            transaction,
            signer,
            chainId,
        });
        return data;
    });
}
export function ed25519Keygen(ctx, userId) {
    return __awaiter(this, void 0, void 0, function* () {
        const { walletId, protocolId } = yield ctx.client.createWallet(userId, {
            scheme: WalletScheme.ED25519,
            type: WalletType.SOLANA,
        });
        const serverUrl = getBaseMPCNetworkUrl(ctx.env, !ctx.disableWebSockets);
        const newSigner = (yield new Promise((resolve, reject) => global.ed25519CreateAccount(serverUrl, walletId, protocolId, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve(result);
        })));
        return { signer: newSigner, walletId };
    });
}
export function ed25519PreKeygen(ctx, pregenIdentifier, pregenIdentifierType) {
    return __awaiter(this, void 0, void 0, function* () {
        const { walletId, protocolId } = yield ctx.client.createPregenWallet({
            pregenIdentifier,
            pregenIdentifierType,
            scheme: WalletScheme.ED25519,
            type: WalletType.SOLANA,
        });
        const serverUrl = getBaseMPCNetworkUrl(ctx.env, !ctx.disableWebSockets);
        const newSigner = (yield new Promise((resolve, reject) => global.ed25519CreateAccount(serverUrl, walletId, protocolId, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve(result);
        })));
        return { signer: newSigner, walletId };
    });
}
export function ed25519Sign(ctx, share, userId, walletId, base64Bytes) {
    return __awaiter(this, void 0, void 0, function* () {
        const { protocolId } = yield ctx.client.preSignMessage(userId, walletId, base64Bytes, WalletScheme.ED25519);
        const base64Sig = (yield new Promise((resolve, reject) => global.ed25519Sign(share, protocolId, base64Bytes, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve(result);
        })));
        return { signature: base64Sig };
    });
}
export function keygen(ctx, userId, type, secretKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const { walletId, protocolId } = yield ctx.client.createWallet(userId, {
            useTwoSigners: true,
            scheme: ctx.useDKLS ? WalletScheme.DKLS : WalletScheme.CGGMP,
            type,
            cosmosPrefix: type === WalletType.COSMOS ? ctx.cosmosPrefix : undefined,
        });
        if (ctx.offloadMPCComputationURL && !ctx.useDKLS) {
            return {
                signer: (yield keygenRequest(ctx, userId, walletId, protocolId)).signer,
                walletId,
            };
        }
        const serverUrl = getBaseMPCNetworkUrl(ctx.env, !ctx.disableWebSockets);
        const signerConfigUser = ctx.useDKLS
            ? configDKLSBase(walletId, 'USER', ctx.disableWebSockets)
            : configCGGMPBase(serverUrl, walletId, 'USER');
        const createAccountFn = ctx.useDKLS ? global.dklsCreateAccount : global.createAccountV2;
        const newSigner = (yield new Promise((resolve, reject) => createAccountFn(signerConfigUser, serverUrl, protocolId, secretKey, () => { }, // no-op for deprecated callback to update progress percentage
        (err, result) => {
            if (err) {
                reject(err);
            }
            resolve(result);
        })));
        return { signer: newSigner, walletId };
    });
}
export function preKeygen(ctx, partnerId, pregenIdentifier, pregenIdentifierType, type, secretKey) {
    return __awaiter(this, void 0, void 0, function* () {
        const { walletId, protocolId } = yield ctx.client.createPregenWallet({
            pregenIdentifier,
            pregenIdentifierType,
            type,
            cosmosPrefix: type === WalletType.COSMOS ? ctx.cosmosPrefix : undefined,
        });
        if (ctx.offloadMPCComputationURL && !ctx.useDKLS) {
            return {
                signer: (yield keygenRequest(ctx, partnerId, walletId, protocolId)).signer,
                walletId,
            };
        }
        const serverUrl = getBaseMPCNetworkUrl(ctx.env, !ctx.disableWebSockets);
        const signerConfigUser = ctx.useDKLS
            ? configDKLSBase(walletId, 'USER', ctx.disableWebSockets)
            : configCGGMPBase(serverUrl, walletId, 'USER');
        const createAccountFn = ctx.useDKLS ? global.dklsCreateAccount : global.createAccountV2;
        const newSigner = (yield new Promise((resolve, reject) => createAccountFn(signerConfigUser, serverUrl, protocolId, secretKey, () => { }, // no-op for deprecated callback to update progress percentage
        (err, result) => {
            if (err) {
                reject(err);
            }
            resolve(result);
        })));
        return { signer: newSigner, walletId };
    });
}
export function signMessage(ctx, share, walletId, userId, message) {
    return __awaiter(this, void 0, void 0, function* () {
        const { protocolId, pendingTransactionId } = yield ctx.client.preSignMessage(userId, walletId, message);
        if (pendingTransactionId) {
            return { pendingTransactionId };
        }
        if (ctx.offloadMPCComputationURL && !ctx.useDKLS) {
            return signMessageRequest(ctx, userId, walletId, protocolId, message, share);
        }
        const serverUrl = getBaseMPCNetworkUrl(ctx.env, !ctx.disableWebSockets);
        const signMessageFn = ctx.useDKLS ? global.dklsSignMessage : global.signMessage;
        return new Promise((resolve, reject) => signMessageFn(share, serverUrl, message, protocolId, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve({ signature: result });
        }));
    });
}
export function signTransaction(ctx, share, walletId, userId, tx, chainId) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data: { protocolId, pendingTransactionId }, } = yield ctx.client.signTransaction(userId, walletId, { transaction: tx, chainId });
        if (pendingTransactionId) {
            return { pendingTransactionId };
        }
        if (ctx.offloadMPCComputationURL && !ctx.useDKLS) {
            return sendTransactionRequest(ctx, userId, walletId, protocolId, tx, share, chainId);
        }
        const serverUrl = getBaseMPCNetworkUrl(ctx.env, !ctx.disableWebSockets);
        const signTransactionFn = ctx.useDKLS ? global.dklsSendTransaction : global.sendTransaction;
        return new Promise((resolve, reject) => signTransactionFn(share, serverUrl, tx, chainId, protocolId, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve({ signature: result });
        }));
    });
}
export function sendTransaction(ctx, share, walletId, userId, tx, chainId) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data: { protocolId, pendingTransactionId }, } = yield ctx.client.sendTransaction(userId, walletId, { transaction: tx, chainId });
        if (pendingTransactionId) {
            return { pendingTransactionId };
        }
        if (ctx.offloadMPCComputationURL && !ctx.useDKLS) {
            return sendTransactionRequest(ctx, userId, walletId, protocolId, tx, share, chainId);
        }
        const serverUrl = getBaseMPCNetworkUrl(ctx.env, !ctx.disableWebSockets);
        const sendTransactionFn = ctx.useDKLS ? global.dklsSendTransaction : global.sendTransaction;
        return new Promise((resolve, reject) => sendTransactionFn(share, serverUrl, tx, chainId, protocolId, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve({ signature: result });
        }));
    });
}
export function refresh(ctx, share, walletId, userId) {
    return __awaiter(this, void 0, void 0, function* () {
        const { data: { protocolId }, } = yield ctx.client.refreshKeys(userId, walletId);
        const serverUrl = getBaseMPCNetworkUrl(ctx.env, !ctx.disableWebSockets);
        const refreshFn = ctx.useDKLS ? global.dklsRefresh : global.refresh;
        return new Promise((resolve, reject) => refreshFn(share, serverUrl, protocolId, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve(result);
        }));
    });
}
export function getPrivateKey(ctx, share, walletId, userId) {
    return __awaiter(this, void 0, void 0, function* () {
        const paraShare = yield ctx.client.getParaShare(userId, walletId);
        if (!paraShare) {
            console.error('unable to retrieve Para share');
            return '';
        }
        return new Promise((resolve, reject) => global.getPrivateKey(share, paraShare, (err, result) => {
            if (err) {
                reject(err);
            }
            resolve(result);
        }));
    });
}
