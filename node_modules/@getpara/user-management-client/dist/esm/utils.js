export function isWalletId(params) {
    return !!params.walletId && !params.externalWalletAddress;
}
export function isExternalWalletAddress(params) {
    return !!params.externalWalletAddress && !params.walletId;
}
export function extractWalletRef(params) {
    if (isWalletId(params)) {
        return ['walletId', params.walletId];
    }
    else if (isExternalWalletAddress(params)) {
        return ['externalWalletAddress', params.externalWalletAddress];
    }
    throw new Error('invalid wallet params');
}
function isValid(s) {
    return !!s && s !== 'null' && s !== 'undefined' && s !== '';
}
export function isEmail(params) {
    return (isValid(params.email) &&
        !isValid(params.phone) &&
        !isValid(params.countryCode) &&
        !isValid(params.farcasterUsername) &&
        !isValid(params.telegramUserId));
}
export function isPhone(params) {
    return (isValid(params.phone) &&
        isValid(params.countryCode) &&
        !isValid(params.email) &&
        !isValid(params.farcasterUsername) &&
        !isValid(params.telegramUserId));
}
export function isFarcaster(params) {
    return (isValid(params.farcasterUsername) &&
        !isValid(params.email) &&
        !isValid(params.phone) &&
        !isValid(params.countryCode) &&
        !isValid(params.telegramUserId));
}
export function isTelegram(params) {
    return (isValid(params.telegramUserId) &&
        !isValid(params.email) &&
        !isValid(params.phone) &&
        !isValid(params.countryCode) &&
        !isValid(params.farcasterUsername));
}
export function isUserId(params) {
    return (isValid(params.userId) &&
        !isValid(params.email) &&
        !isValid(params.phone) &&
        !isValid(params.countryCode) &&
        !isValid(params.farcasterUsername) &&
        !isValid(params.telegramUserId));
}
export function extractAuthInfo(obj, { allowUserId = false, isRequired = false } = {}) {
    switch (true) {
        case isEmail(obj):
            return { auth: { email: obj.email }, authType: 'email', identifier: obj.email, publicKeyIdentifier: obj.email };
        case isPhone(obj):
            return {
                auth: { phone: obj.phone, countryCode: obj.countryCode },
                authType: 'phone',
                identifier: `${obj.countryCode}${obj.phone}`,
                publicKeyIdentifier: `${obj.countryCode}${obj.phone}`,
            };
        case isFarcaster(obj):
            return {
                auth: { farcasterUsername: obj.farcasterUsername },
                authType: 'farcaster',
                identifier: obj.farcasterUsername,
                publicKeyIdentifier: `${obj.farcasterUsername}-farcaster`,
            };
        case isTelegram(obj):
            return {
                auth: { telegramUserId: obj.telegramUserId },
                authType: 'telegram',
                identifier: obj.telegramUserId,
                publicKeyIdentifier: `${obj.telegramUserId}-telegram`,
            };
        case isUserId(obj) && allowUserId:
            return { auth: { userId: obj.userId }, authType: 'userId', identifier: obj.userId, publicKeyIdentifier: obj.userId };
        default:
            if (isRequired) {
                throw new Error('invalid auth object');
            }
            return undefined;
    }
}
