"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.distributeNewShare = void 0;
const user_management_client_1 = require("@getpara/user-management-client");
const utils_js_1 = require("../cryptography/utils.js");
const recovery_js_1 = require("./recovery.js");
// function to call on new user share to perform all necessary distribution
function distributeNewShare({ ctx, userId, walletId, userShare, ignoreRedistributingBackupEncryptedShare = false, emailProps = {}, partnerId, protocolId, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const publicKeysRes = yield ctx.client.getSessionPublicKeys(userId);
        const biometricEncryptedShares = publicKeysRes.data.keys
            .map(key => {
            if (!key.publicKey) {
                return;
            }
            const { encryptedMessageHex, encryptedKeyHex } = (0, utils_js_1.encryptWithDerivedPublicKey)(key.sigDerivedPublicKey, userShare);
            return {
                encryptedShare: encryptedMessageHex,
                encryptedKey: encryptedKeyHex,
                type: user_management_client_1.KeyShareType.USER,
                encryptor: user_management_client_1.EncryptorType.BIOMETRICS,
                biometricPublicKey: key.sigDerivedPublicKey,
                partnerId,
                protocolId,
            };
        })
            .filter(Boolean);
        const passwords = yield ctx.client.getPasswords({ userId });
        const passwordEncryptedShares = passwords
            .map(password => {
            if (password.status === 'PENDING') {
                return;
            }
            const { encryptedMessageHex, encryptedKeyHex } = (0, utils_js_1.encryptWithDerivedPublicKey)(password.sigDerivedPublicKey, userShare);
            return {
                encryptedShare: encryptedMessageHex,
                encryptedKey: encryptedKeyHex,
                type: user_management_client_1.KeyShareType.USER,
                encryptor: user_management_client_1.EncryptorType.PASSWORD,
                passwordId: password.id,
                partnerId,
                protocolId,
            };
        })
            .filter(Boolean);
        const allEncryptedShares = [...biometricEncryptedShares, ...passwordEncryptedShares];
        return yield (0, recovery_js_1.sendRecoveryForShare)({
            ctx,
            userId,
            walletId,
            otherEncryptedShares: allEncryptedShares,
            userSigner: userShare,
            ignoreRedistributingBackupEncryptedShare,
            emailProps,
        });
    });
}
exports.distributeNewShare = distributeNewShare;
