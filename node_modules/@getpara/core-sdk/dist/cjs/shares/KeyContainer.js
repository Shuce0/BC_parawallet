"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyContainer = void 0;
const ecies_js_1 = require("@celo/utils/lib/ecies.js");
const eutil = __importStar(require("ethereumjs-util"));
const forge = __importStar(require("node-forge"));
class KeyContainer {
    constructor(walletId, keyshare, address) {
        this.walletId = walletId;
        this.keyshare = keyshare;
        this.address = address;
        this.backupDecryptionKey = Buffer.from(forge.random.getBytesSync(32), 'binary').toString('hex');
    }
    static buildFrom(serializedContainer) {
        try {
            const parsedObject = JSON.parse(serializedContainer);
            return Object.assign(new KeyContainer('', '', ''), parsedObject);
        }
        catch (e) {
            const container = new KeyContainer('', '', '');
            container.backupDecryptionKey = serializedContainer.split('|')[0];
            return container;
        }
    }
    getPublicEncryptionKey() {
        return Buffer.from(eutil.privateToPublic(Buffer.from(this.backupDecryptionKey, 'hex')));
    }
    getPublicEncryptionKeyHex() {
        return this.getPublicEncryptionKey().toString('hex');
    }
    encryptForSelf(backup) {
        try {
            const pubkey = this.getPublicEncryptionKey();
            const data = (0, ecies_js_1.Encrypt)(pubkey, Buffer.from(backup, 'ucs2')).toString('base64');
            return data;
        }
        catch (error) {
            throw Error('Error encrypting backup');
        }
    }
    static encryptWithPublicKey(publicKey, backup) {
        try {
            const data = (0, ecies_js_1.Encrypt)(publicKey, Buffer.from(backup, 'ucs2')).toString('base64');
            return data;
        }
        catch (error) {
            throw Error('Error encrypting backup');
        }
    }
    decrypt(encryptedBackup) {
        try {
            const buf = Buffer.from(encryptedBackup, 'base64');
            const data = (0, ecies_js_1.Decrypt)(Buffer.from(this.backupDecryptionKey, 'hex'), buf);
            return Buffer.from(data.buffer).toString('ucs2');
        }
        catch (error) {
            throw Error('Error decrypting backup');
        }
    }
}
exports.KeyContainer = KeyContainer;
