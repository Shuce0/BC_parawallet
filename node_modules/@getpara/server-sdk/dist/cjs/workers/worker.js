"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleMessage = void 0;
const axios_1 = __importDefault(require("axios"));
const core_sdk_1 = require("@getpara/core-sdk");
const walletUtils = __importStar(require("./walletUtils.js"));
let rawWasm;
function requestWasmWithRetries(ctx, retries = 3) {
    return __awaiter(this, void 0, void 0, function* () {
        for (let i = 0; i < retries; i++) {
            try {
                return yield axios_1.default.get(`${(0, core_sdk_1.getPortalBaseURL)(ctx, true, true)}/static/js/main.wasm`, { responseType: 'arraybuffer' });
            }
            catch (e) {
                if (i === retries - 1) {
                    throw e;
                }
            }
        }
    });
}
function loadWasm(ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        yield Promise.resolve().then(() => __importStar(require('../wasm/wasm_exec.js')));
        global.WebSocket = require('ws');
        const goWasm = new global.Go();
        if (!rawWasm) {
            rawWasm = (yield requestWasmWithRetries(ctx)).data;
        }
        const wasmBuffer = new Uint8Array(rawWasm);
        const webAssemblySource = yield WebAssembly.instantiate(wasmBuffer, goWasm.importObject);
        goWasm.run(webAssemblySource.instance);
    });
}
function executeMessage(ctx, message) {
    return __awaiter(this, void 0, void 0, function* () {
        const { functionType, params } = message;
        switch (functionType) {
            case 'KEYGEN': {
                const { userId, secretKey, type = core_sdk_1.WalletType.EVM } = params;
                return walletUtils.keygen(ctx, userId, type, secretKey);
            }
            case 'SIGN_TRANSACTION': {
                const { share, walletId, userId, tx, chainId } = params;
                return walletUtils.signTransaction(ctx, share, walletId, userId, tx, chainId);
            }
            case 'SEND_TRANSACTION': {
                const { share, walletId, userId, tx, chainId } = params;
                return walletUtils.sendTransaction(ctx, share, walletId, userId, tx, chainId);
            }
            case 'SIGN_MESSAGE': {
                const { share, walletId, userId, message } = params;
                return walletUtils.signMessage(ctx, share, walletId, userId, message);
            }
            case 'REFRESH': {
                const { share, walletId, userId } = params;
                return walletUtils.refresh(ctx, share, walletId, userId);
            }
            case 'PREKEYGEN': {
                const { email, partnerId, secretKey, type = core_sdk_1.WalletType.EVM } = params;
                let { pregenIdentifier, pregenIdentifierType } = params;
                if (email !== 'null' && email !== 'undefined' && email !== '' && email != null) {
                    pregenIdentifier = email;
                    pregenIdentifierType = 'EMAIL';
                }
                const keygenRes = yield walletUtils.preKeygen(ctx, partnerId, pregenIdentifier, pregenIdentifierType, type, secretKey);
                return keygenRes;
            }
            case 'GET_PRIVATE_KEY': {
                const { share, walletId, userId } = params;
                return yield walletUtils.getPrivateKey(ctx, share, walletId, userId);
            }
            case 'ED25519_KEYGEN': {
                const { userId } = params;
                return walletUtils.ed25519Keygen(ctx, userId);
            }
            case 'ED25519_SIGN': {
                const { share, walletId, userId, base64Bytes } = params;
                return walletUtils.ed25519Sign(ctx, share, userId, walletId, base64Bytes);
            }
            case 'ED25519_PREKEYGEN': {
                const { email } = params;
                let { pregenIdentifier, pregenIdentifierType } = params;
                if (email !== 'null' && email !== 'undefined' && email !== '' && email != null) {
                    pregenIdentifier = email;
                    pregenIdentifierType = 'EMAIL';
                }
                return walletUtils.ed25519PreKeygen(ctx, pregenIdentifier, pregenIdentifierType);
            }
            default: {
                throw new Error(`functionType: ${functionType} not supported`);
            }
        }
    });
}
function handleMessage(e) {
    return __awaiter(this, void 0, void 0, function* () {
        const { env, apiKey, cosmosPrefix = 'cosmos', offloadMPCComputationURL, disableWorkers, sessionCookie, useDKLS, disableWebSockets, workId, } = e.data;
        const ctx = {
            env,
            apiKey,
            client: (0, core_sdk_1.initClient)({ env, version: core_sdk_1.paraVersion, apiKey, retrieveSessionCookie: () => sessionCookie }),
            offloadMPCComputationURL: offloadMPCComputationURL,
            mpcComputationClient: offloadMPCComputationURL
                ? core_sdk_1.mpcComputationClient.initClient(offloadMPCComputationURL, !!disableWorkers)
                : undefined,
            useDKLS,
            disableWebSockets: !!disableWebSockets,
            cosmosPrefix,
        };
        if (!ctx.offloadMPCComputationURL || ctx.useDKLS) {
            yield loadWasm(ctx);
        }
        const result = yield executeMessage(ctx, e.data);
        result.workId = workId;
        return result;
    });
}
exports.handleMessage = handleMessage;
