import { WalletScheme, WalletType } from '@getpara/user-management-client';
import { stringToPhoneNumber } from './formatting.js';
export const WalletSchemeTypeMap = {
    [WalletScheme.DKLS]: {
        [WalletType.EVM]: true,
        [WalletType.COSMOS]: true,
    },
    [WalletScheme.CGGMP]: {
        [WalletType.EVM]: true,
        [WalletType.COSMOS]: true,
    },
    [WalletScheme.ED25519]: {
        [WalletType.SOLANA]: true,
    },
};
export function isPregenIdentifierMatch(a, b, type) {
    if (!a || !b) {
        return false;
    }
    switch (type) {
        case 'EMAIL':
            return a.toLowerCase() === b.toLowerCase();
        case 'PHONE':
            return stringToPhoneNumber(a) === stringToPhoneNumber(b);
        case 'CUSTOM_ID':
            return a === b;
        default:
            return a.replace(/^@/g, '').toLowerCase() === b.replace(/^@/g, '').toLowerCase();
    }
}
export function isWalletSupported(types, wallet) {
    return types.some((walletType) => !!WalletSchemeTypeMap[wallet.scheme][walletType]);
}
export function getSchemes(types) {
    return Object.keys(WalletSchemeTypeMap).filter(scheme => {
        if (scheme === WalletScheme.CGGMP) {
            return false;
        }
        return (Array.isArray(types) ? types : Object.keys(types)).some(type => WalletSchemeTypeMap[scheme][type]);
    });
}
export function getWalletTypes(schemes) {
    return [
        ...new Set(schemes.reduce((acc, scheme) => {
            return [...acc, ...Object.keys(WalletSchemeTypeMap[scheme]).filter(type => WalletSchemeTypeMap[scheme][type])];
        }, [])),
    ];
}
export function getEquivalentTypes(types) {
    return getWalletTypes(getSchemes((Array.isArray(types) ? types : [types]).map(t => WalletType[t])));
}
export function entityToWallet(w) {
    return Object.assign(Object.assign({}, w), { scheme: w.scheme, type: w.type, pregenIdentifierType: w.pregenIdentifierType });
}
export function migrateWallet(obj) {
    if (['USER', 'PREGEN'].includes(obj.type)) {
        obj.isPregen = obj.type === 'PREGEN';
        obj.type = obj.scheme === WalletScheme.ED25519 ? WalletType.SOLANA : WalletType.EVM;
    }
    if (!!obj.scheme && !obj.type) {
        obj.type = obj.scheme === WalletScheme.ED25519 ? WalletType.SOLANA : WalletType.EVM;
    }
    return obj;
}
