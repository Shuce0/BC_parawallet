var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { randomBytes } from 'crypto';
import { Encrypt as ECIESEncrypt, Decrypt as ECIESDecrypt } from '@celo/utils/lib/ecies.js';
import { Buffer } from 'buffer';
import * as eutil from 'ethereumjs-util';
export function upload(message, userManagementClient) {
    return __awaiter(this, void 0, void 0, function* () {
        let secret;
        let publicKeyUint8Array;
        while (true) {
            try {
                secret = randomBytes(32).toString('hex');
                // privateToPublic throws error when private key is larger than group order
                // so we want to keep trying until we get a valid private key
                publicKeyUint8Array = eutil.privateToPublic(Buffer.from(secret, 'hex'));
                break;
            }
            catch (e) {
                continue;
            }
        }
        const pubkey = Buffer.from(publicKeyUint8Array);
        const data = ECIESEncrypt(pubkey, Buffer.from(message, 'ucs2')).toString('base64');
        const { data: { id }, } = yield userManagementClient.tempTrasmissionInit(data);
        return encodeURIComponent(id + '|' + secret);
    });
}
export function retrieve(uriEncodedMessage, userManagementClient) {
    return __awaiter(this, void 0, void 0, function* () {
        const [id, secret] = decodeURIComponent(uriEncodedMessage).split('|');
        const response = yield userManagementClient.tempTrasmission(id);
        const data = response.data.message;
        const buf = Buffer.from(data, 'base64');
        const res = Buffer.from(ECIESDecrypt(Buffer.from(secret, 'hex'), buf).buffer).toString('ucs2');
        return res;
    });
}
