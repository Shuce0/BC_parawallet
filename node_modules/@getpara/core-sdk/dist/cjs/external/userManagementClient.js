"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initClient = exports.getBaseMPCNetworkUrl = exports.getBaseUrl = exports.getBaseOAuthUrl = void 0;
const user_management_client_1 = __importDefault(require("@getpara/user-management-client"));
const index_js_1 = require("../types/index.js");
function getBaseOAuthUrl(env) {
    switch (env) {
        case index_js_1.Environment.DEV:
            return 'http://localhost:8080/';
        case index_js_1.Environment.SANDBOX:
            return 'https://api.sandbox.usecapsule.com/';
        case index_js_1.Environment.BETA:
            return 'https://api.beta.usecapsule.com/';
        case index_js_1.Environment.PROD:
            return 'https://api.usecapsule.com/';
        default:
            throw new Error(`unsupported env: ${env}`);
    }
}
exports.getBaseOAuthUrl = getBaseOAuthUrl;
function getBaseUrl(env) {
    switch (env) {
        case index_js_1.Environment.DEV:
            return 'http://localhost:8080/';
        case index_js_1.Environment.SANDBOX:
            return 'https://api.sandbox.getpara.com/';
        case index_js_1.Environment.BETA:
            return 'https://api.beta.getpara.com/';
        case index_js_1.Environment.PROD:
            return 'https://api.getpara.com/';
        default:
            throw new Error(`unsupported env: ${env}`);
    }
}
exports.getBaseUrl = getBaseUrl;
function getBaseMPCNetworkUrl(env, useWebsocket) {
    const prefix = useWebsocket ? 'ws' : 'http';
    switch (env) {
        case index_js_1.Environment.DEV:
            return `${prefix}://localhost:3000`;
        case index_js_1.Environment.SANDBOX:
            return `${prefix}s://mpc-network.sandbox.getpara.com`;
        case index_js_1.Environment.BETA:
            return `${prefix}s://mpc-network.beta.getpara.com`;
        case index_js_1.Environment.PROD:
            return `${prefix}s://mpc-network.prod.getpara.com`;
        default:
            throw new Error(`unsupported env: ${env}`);
    }
}
exports.getBaseMPCNetworkUrl = getBaseMPCNetworkUrl;
function initClient({ env, version, apiKey, partnerId, useFetchAdapter = false, retrieveSessionCookie, persistSessionCookie, }) {
    return new user_management_client_1.default({
        userManagementHost: getBaseUrl(env),
        version: [index_js_1.Environment.DEV, index_js_1.Environment.SANDBOX].includes(env) ? 'dev' : version,
        apiKey: apiKey,
        partnerId,
        opts: { useFetchAdapter },
        retrieveSessionCookie,
        persistSessionCookie,
    });
}
exports.initClient = initClient;
