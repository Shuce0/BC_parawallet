"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ed25519PreKeygen = exports.ed25519Keygen = exports.preKeygen = exports.keygen = void 0;
const uuid = __importStar(require("uuid"));
const core_sdk_1 = require("@getpara/core-sdk");
const workerWrapper_js_1 = require("../workers/workerWrapper.js");
function isKeygenComplete(ctx, userId, walletId) {
    return __awaiter(this, void 0, void 0, function* () {
        const wallets = yield ctx.client.getWallets(userId);
        const wallet = wallets.data.wallets.find(w => w.id === walletId);
        return !!wallet.address;
    });
}
function isPreKeygenComplete(ctx, pregenIdentifier, pregenIdentifierType, walletId) {
    return __awaiter(this, void 0, void 0, function* () {
        const wallets = yield ctx.client.getPregenWallets({ [pregenIdentifierType]: [pregenIdentifier] });
        const wallet = wallets.wallets.find(w => w.id === walletId);
        return !!(wallet === null || wallet === void 0 ? void 0 : wallet.address);
    });
}
function keygen(ctx, userId, type, secretKey, skipDistribute = false, sessionCookie, _emailProps = {}) {
    return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
        const workId = uuid.v4();
        const worker = yield (0, workerWrapper_js_1.setupWorker)(ctx, (res) => __awaiter(this, void 0, void 0, function* () {
            yield (0, core_sdk_1.waitUntilTrue)(() => __awaiter(this, void 0, void 0, function* () { return isKeygenComplete(ctx, userId, res.walletId); }), 15000, 1000);
            if (skipDistribute) {
                resolve({
                    signer: res.signer,
                    walletId: res.walletId,
                    recoveryShare: null,
                });
            }
        }), workId);
        worker.postMessage({
            env: ctx.env,
            apiKey: ctx.apiKey,
            cosmosPrefix: ctx.cosmosPrefix,
            params: { userId, secretKey, type },
            functionType: 'KEYGEN',
            offloadMPCComputationURL: ctx.offloadMPCComputationURL,
            disableWorkers: ctx.disableWorkers,
            sessionCookie,
            useDKLS: ctx.useDKLS,
            disableWebSockets: ctx.disableWebSockets,
            wasmOverride: ctx.wasmOverride,
            workId,
        });
    }));
}
exports.keygen = keygen;
function preKeygen(ctx, pregenIdentifier, pregenIdentifierType, type, secretKey, _skipDistribute = false, partnerId, sessionCookie) {
    return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
        const workId = uuid.v4();
        const worker = yield (0, workerWrapper_js_1.setupWorker)(ctx, (res) => __awaiter(this, void 0, void 0, function* () {
            yield (0, core_sdk_1.waitUntilTrue)(() => __awaiter(this, void 0, void 0, function* () { return isPreKeygenComplete(ctx, pregenIdentifier, pregenIdentifierType, res.walletId); }), 15000, 1000);
            resolve({
                signer: res.signer,
                walletId: res.walletId,
                recoveryShare: null,
            });
        }), workId);
        const email = undefined;
        const params = { pregenIdentifier, pregenIdentifierType, secretKey, partnerId, email, type };
        if (pregenIdentifierType === 'EMAIL') {
            params.email = pregenIdentifier;
        }
        worker.postMessage({
            env: ctx.env,
            apiKey: ctx.apiKey,
            cosmosPrefix: ctx.cosmosPrefix,
            params: params,
            functionType: 'PREKEYGEN',
            offloadMPCComputationURL: ctx.offloadMPCComputationURL,
            disableWorkers: ctx.disableWorkers,
            sessionCookie,
            useDKLS: ctx.useDKLS,
            disableWebSockets: ctx.disableWebSockets,
            wasmOverride: ctx.wasmOverride,
            workId,
        });
    }));
}
exports.preKeygen = preKeygen;
function ed25519Keygen(ctx, userId, sessionCookie, _emailProps = {}) {
    return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
        const workId = uuid.v4();
        const worker = yield (0, workerWrapper_js_1.setupWorker)(ctx, (res) => __awaiter(this, void 0, void 0, function* () {
            yield (0, core_sdk_1.waitUntilTrue)(() => __awaiter(this, void 0, void 0, function* () { return isKeygenComplete(ctx, userId, res.walletId); }), 15000, 1000);
            resolve({
                signer: res.signer,
                walletId: res.walletId,
                recoveryShare: null,
            });
        }), workId);
        worker.postMessage({
            env: ctx.env,
            apiKey: ctx.apiKey,
            cosmosPrefix: ctx.cosmosPrefix,
            params: { userId },
            functionType: 'ED25519_KEYGEN',
            disableWorkers: ctx.disableWorkers,
            sessionCookie,
            disableWebSockets: ctx.disableWebSockets,
            wasmOverride: ctx.wasmOverride,
            workId,
        });
    }));
}
exports.ed25519Keygen = ed25519Keygen;
function ed25519PreKeygen(ctx, pregenIdentifier, pregenIdentifierType, sessionCookie) {
    return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
        const workId = uuid.v4();
        const worker = yield (0, workerWrapper_js_1.setupWorker)(ctx, (res) => __awaiter(this, void 0, void 0, function* () {
            yield (0, core_sdk_1.waitUntilTrue)(() => __awaiter(this, void 0, void 0, function* () { return isPreKeygenComplete(ctx, pregenIdentifier, pregenIdentifierType, res.walletId); }), 15000, 1000);
            resolve({
                signer: res.signer,
                walletId: res.walletId,
                recoveryShare: null,
            });
        }), workId);
        const email = undefined;
        const params = { pregenIdentifier, pregenIdentifierType, email };
        if (pregenIdentifierType === 'EMAIL') {
            params.email = pregenIdentifier;
        }
        worker.postMessage({
            env: ctx.env,
            apiKey: ctx.apiKey,
            cosmosPrefix: ctx.cosmosPrefix,
            params: params,
            functionType: 'ED25519_PREKEYGEN',
            disableWorkers: ctx.disableWorkers,
            sessionCookie,
            disableWebSockets: ctx.disableWebSockets,
            wasmOverride: ctx.wasmOverride,
            workId,
        });
    }));
}
exports.ed25519PreKeygen = ed25519PreKeygen;
