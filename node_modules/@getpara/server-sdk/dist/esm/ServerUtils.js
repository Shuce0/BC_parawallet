import { ServerLocalStorage } from './ServerLocalStorage.js';
import { ServerSessionStorage } from './ServerSessionStorage.js';
import { keygen, preKeygen, ed25519Keygen, ed25519PreKeygen } from './wallet/keygen.js';
import { signMessage, sendTransaction, signTransaction, ed25519Sign } from './wallet/signing.js';
import { getPrivateKey } from './wallet/privateKey.js';
export class ServerUtils {
    constructor() {
        this.localStorage = new ServerLocalStorage();
        this.sessionStorage = new ServerSessionStorage();
        this.secureStorage = undefined;
        this.isSyncStorage = true;
        this.disableProviderModal = true;
    }
    getPrivateKey(ctx, userId, walletId, share, sessionCookie) {
        return getPrivateKey(ctx, userId, walletId, share, sessionCookie);
    }
    keygen(ctx, userId, type, secretKey, sessionCookie, emailProps) {
        return keygen(ctx, userId, type, secretKey, true, sessionCookie, emailProps);
    }
    refresh(_ctx, _sessionCookie, _userId, _walletId, _share, _oldPartnerId, _newPartnerId) {
        throw new Error('not implemented');
    }
    preKeygen(ctx, partnerId, pregenIdentifier, pregenIdentifierType, type, secretKey, // should be acceptable as null in RN as we don't pre-gen them
    sessionCookie) {
        return preKeygen(ctx, pregenIdentifier, pregenIdentifierType, type, secretKey, false, partnerId, sessionCookie);
    }
    signMessage(ctx, userId, walletId, share, message, sessionCookie, isDKLS) {
        return signMessage(ctx, userId, walletId, share, message, sessionCookie, isDKLS);
    }
    signTransaction(ctx, userId, walletId, share, message, chainId, sessionCookie, isDKLS) {
        return signTransaction(ctx, userId, walletId, share, message, chainId, sessionCookie, isDKLS);
    }
    sendTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS) {
        return sendTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS);
    }
    signHash(_address, _hash) {
        throw new Error('not implemented');
    }
    ed25519Keygen(ctx, userId, sessionCookie, emailProps) {
        return ed25519Keygen(ctx, userId, sessionCookie, emailProps);
    }
    ed25519PreKeygen(ctx, pregenIdentifier, pregenIdentifierType, sessionCookie) {
        return ed25519PreKeygen(ctx, pregenIdentifier, pregenIdentifierType, sessionCookie);
    }
    ed25519Sign(ctx, userId, walletId, share, base64Bytes, sessionCookie) {
        return ed25519Sign(ctx, userId, walletId, share, base64Bytes, sessionCookie);
    }
    openPopup(_popupUrl) {
        throw new Error('not implemented');
    }
}
