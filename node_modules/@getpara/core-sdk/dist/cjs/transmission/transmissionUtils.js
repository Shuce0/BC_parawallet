"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.retrieve = exports.upload = void 0;
const crypto_1 = require("crypto");
const ecies_js_1 = require("@celo/utils/lib/ecies.js");
const buffer_1 = require("buffer");
const eutil = __importStar(require("ethereumjs-util"));
function upload(message, userManagementClient) {
    return __awaiter(this, void 0, void 0, function* () {
        let secret;
        let publicKeyUint8Array;
        while (true) {
            try {
                secret = (0, crypto_1.randomBytes)(32).toString('hex');
                // privateToPublic throws error when private key is larger than group order
                // so we want to keep trying until we get a valid private key
                publicKeyUint8Array = eutil.privateToPublic(buffer_1.Buffer.from(secret, 'hex'));
                break;
            }
            catch (e) {
                continue;
            }
        }
        const pubkey = buffer_1.Buffer.from(publicKeyUint8Array);
        const data = (0, ecies_js_1.Encrypt)(pubkey, buffer_1.Buffer.from(message, 'ucs2')).toString('base64');
        const { data: { id }, } = yield userManagementClient.tempTrasmissionInit(data);
        return encodeURIComponent(id + '|' + secret);
    });
}
exports.upload = upload;
function retrieve(uriEncodedMessage, userManagementClient) {
    return __awaiter(this, void 0, void 0, function* () {
        const [id, secret] = decodeURIComponent(uriEncodedMessage).split('|');
        const response = yield userManagementClient.tempTrasmission(id);
        const data = response.data.message;
        const buf = buffer_1.Buffer.from(data, 'base64');
        const res = buffer_1.Buffer.from((0, ecies_js_1.Decrypt)(buffer_1.Buffer.from(secret, 'hex'), buf).buffer).toString('ucs2');
        return res;
    });
}
exports.retrieve = retrieve;
