"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.constructUrl = exports.getParaConnectBaseUrl = exports.getParaConnectDomain = exports.getPortalBaseURL = exports.getPortalDomain = void 0;
const index_js_1 = require("../types/index.js");
function getPortalDomain(env, isE2E) {
    if (isE2E) {
        return `localhost`;
    }
    switch (env) {
        case index_js_1.Environment.DEV:
            return 'localhost';
        case index_js_1.Environment.SANDBOX:
            return 'app.sandbox.usecapsule.com';
        case index_js_1.Environment.BETA:
            return 'app.beta.usecapsule.com';
        case index_js_1.Environment.PROD:
            return 'app.usecapsule.com';
        default:
            throw new Error(`env: ${env} not supported`);
    }
}
exports.getPortalDomain = getPortalDomain;
function getPortalBaseURL({ env, isE2E }, useLocalIp, isForWasm) {
    if (isE2E) {
        if (isForWasm) {
            return `https://app.sandbox.usecapsule.com`;
        }
        return `http://localhost:3003`;
    }
    const domain = getPortalDomain(env);
    if (env === index_js_1.Environment.DEV) {
        if (useLocalIp) {
            return `http://127.0.0.1:3003`;
        }
        return `http://${domain}:3003`;
    }
    return `https://${domain}`;
}
exports.getPortalBaseURL = getPortalBaseURL;
function getParaConnectDomain(env) {
    switch (env) {
        case index_js_1.Environment.DEV:
            return 'localhost';
        case index_js_1.Environment.SANDBOX:
            return 'connect.sandbox.getpara.com';
        case index_js_1.Environment.BETA:
            return 'connect.beta.getpara.com';
        case index_js_1.Environment.PROD:
            return 'connect.getpara.com';
        default:
            throw new Error(`env: ${env} not supported`);
    }
}
exports.getParaConnectDomain = getParaConnectDomain;
function getParaConnectBaseUrl({ env }, useLocalIp) {
    const domain = getParaConnectDomain(env);
    if (env === index_js_1.Environment.DEV) {
        if (useLocalIp) {
            return `http://127.0.0.1:3008`;
        }
        return `http://${domain}:3008`;
    }
    return `https://${domain}`;
}
exports.getParaConnectBaseUrl = getParaConnectBaseUrl;
function constructUrl({ base, path, params = {}, }) {
    const url = new URL(path, base);
    Object.entries(params).forEach(([key, value]) => {
        if (!!value && value !== 'undefined' && value !== 'null')
            url.searchParams.set(key, value.toString());
    });
    return url.toString();
}
exports.constructUrl = constructUrl;
