"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateWallet = exports.entityToWallet = exports.getEquivalentTypes = exports.getWalletTypes = exports.getSchemes = exports.isWalletSupported = exports.isPregenIdentifierMatch = exports.WalletSchemeTypeMap = void 0;
const user_management_client_1 = require("@getpara/user-management-client");
const formatting_js_1 = require("./formatting.js");
exports.WalletSchemeTypeMap = {
    [user_management_client_1.WalletScheme.DKLS]: {
        [user_management_client_1.WalletType.EVM]: true,
        [user_management_client_1.WalletType.COSMOS]: true,
    },
    [user_management_client_1.WalletScheme.CGGMP]: {
        [user_management_client_1.WalletType.EVM]: true,
        [user_management_client_1.WalletType.COSMOS]: true,
    },
    [user_management_client_1.WalletScheme.ED25519]: {
        [user_management_client_1.WalletType.SOLANA]: true,
    },
};
function isPregenIdentifierMatch(a, b, type) {
    if (!a || !b) {
        return false;
    }
    switch (type) {
        case 'EMAIL':
            return a.toLowerCase() === b.toLowerCase();
        case 'PHONE':
            return (0, formatting_js_1.stringToPhoneNumber)(a) === (0, formatting_js_1.stringToPhoneNumber)(b);
        case 'CUSTOM_ID':
            return a === b;
        default:
            return a.replace(/^@/g, '').toLowerCase() === b.replace(/^@/g, '').toLowerCase();
    }
}
exports.isPregenIdentifierMatch = isPregenIdentifierMatch;
function isWalletSupported(types, wallet) {
    return types.some((walletType) => !!exports.WalletSchemeTypeMap[wallet.scheme][walletType]);
}
exports.isWalletSupported = isWalletSupported;
function getSchemes(types) {
    return Object.keys(exports.WalletSchemeTypeMap).filter(scheme => {
        if (scheme === user_management_client_1.WalletScheme.CGGMP) {
            return false;
        }
        return (Array.isArray(types) ? types : Object.keys(types)).some(type => exports.WalletSchemeTypeMap[scheme][type]);
    });
}
exports.getSchemes = getSchemes;
function getWalletTypes(schemes) {
    return [
        ...new Set(schemes.reduce((acc, scheme) => {
            return [...acc, ...Object.keys(exports.WalletSchemeTypeMap[scheme]).filter(type => exports.WalletSchemeTypeMap[scheme][type])];
        }, [])),
    ];
}
exports.getWalletTypes = getWalletTypes;
function getEquivalentTypes(types) {
    return getWalletTypes(getSchemes((Array.isArray(types) ? types : [types]).map(t => user_management_client_1.WalletType[t])));
}
exports.getEquivalentTypes = getEquivalentTypes;
function entityToWallet(w) {
    return Object.assign(Object.assign({}, w), { scheme: w.scheme, type: w.type, pregenIdentifierType: w.pregenIdentifierType });
}
exports.entityToWallet = entityToWallet;
function migrateWallet(obj) {
    if (['USER', 'PREGEN'].includes(obj.type)) {
        obj.isPregen = obj.type === 'PREGEN';
        obj.type = obj.scheme === user_management_client_1.WalletScheme.ED25519 ? user_management_client_1.WalletType.SOLANA : user_management_client_1.WalletType.EVM;
    }
    if (!!obj.scheme && !obj.type) {
        obj.type = obj.scheme === user_management_client_1.WalletScheme.ED25519 ? user_management_client_1.WalletType.SOLANA : user_management_client_1.WalletType.EVM;
    }
    return obj;
}
exports.migrateWallet = migrateWallet;
