"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerUtils = void 0;
const ServerLocalStorage_js_1 = require("./ServerLocalStorage.js");
const ServerSessionStorage_js_1 = require("./ServerSessionStorage.js");
const keygen_js_1 = require("./wallet/keygen.js");
const signing_js_1 = require("./wallet/signing.js");
const privateKey_js_1 = require("./wallet/privateKey.js");
class ServerUtils {
    constructor() {
        this.localStorage = new ServerLocalStorage_js_1.ServerLocalStorage();
        this.sessionStorage = new ServerSessionStorage_js_1.ServerSessionStorage();
        this.secureStorage = undefined;
        this.isSyncStorage = true;
        this.disableProviderModal = true;
    }
    getPrivateKey(ctx, userId, walletId, share, sessionCookie) {
        return (0, privateKey_js_1.getPrivateKey)(ctx, userId, walletId, share, sessionCookie);
    }
    keygen(ctx, userId, type, secretKey, sessionCookie, emailProps) {
        return (0, keygen_js_1.keygen)(ctx, userId, type, secretKey, true, sessionCookie, emailProps);
    }
    refresh(_ctx, _sessionCookie, _userId, _walletId, _share, _oldPartnerId, _newPartnerId) {
        throw new Error('not implemented');
    }
    preKeygen(ctx, partnerId, pregenIdentifier, pregenIdentifierType, type, secretKey, // should be acceptable as null in RN as we don't pre-gen them
    sessionCookie) {
        return (0, keygen_js_1.preKeygen)(ctx, pregenIdentifier, pregenIdentifierType, type, secretKey, false, partnerId, sessionCookie);
    }
    signMessage(ctx, userId, walletId, share, message, sessionCookie, isDKLS) {
        return (0, signing_js_1.signMessage)(ctx, userId, walletId, share, message, sessionCookie, isDKLS);
    }
    signTransaction(ctx, userId, walletId, share, message, chainId, sessionCookie, isDKLS) {
        return (0, signing_js_1.signTransaction)(ctx, userId, walletId, share, message, chainId, sessionCookie, isDKLS);
    }
    sendTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS) {
        return (0, signing_js_1.sendTransaction)(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS);
    }
    signHash(_address, _hash) {
        throw new Error('not implemented');
    }
    ed25519Keygen(ctx, userId, sessionCookie, emailProps) {
        return (0, keygen_js_1.ed25519Keygen)(ctx, userId, sessionCookie, emailProps);
    }
    ed25519PreKeygen(ctx, pregenIdentifier, pregenIdentifierType, sessionCookie) {
        return (0, keygen_js_1.ed25519PreKeygen)(ctx, pregenIdentifier, pregenIdentifierType, sessionCookie);
    }
    ed25519Sign(ctx, userId, walletId, share, base64Bytes, sessionCookie) {
        return (0, signing_js_1.ed25519Sign)(ctx, userId, walletId, share, base64Bytes, sessionCookie);
    }
    openPopup(_popupUrl) {
        throw new Error('not implemented');
    }
}
exports.ServerUtils = ServerUtils;
