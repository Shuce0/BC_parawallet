import { ParaCore } from './ParaCore.js';
export { AuthMethod, type CurrentWalletIds, EmailTheme, type PartnerEntity, type WalletEntity, Network, WalletType, WalletScheme, OnRampAsset, OnRampPurchaseType, OnRampProvider, OnRampPurchaseStatus, type OnRampConfig, type OnRampAllowedAssets, type OnRampPurchase, OAuthMethod, type TPregenIdentifierType, type PregenIds, NON_ED25519, PREGEN_IDENTIFIER_TYPES, } from '@getpara/user-management-client';
export { OnRampMethod, PopupType, PregenIdentifierType, RecoveryStatus, type ProviderAssetInfo, type SignatureRes, type FullSignatureRes, type SuccessfulSignatureRes, type DeniedSignatureRes, type DeniedSignatureResWithUrl, type OnRampAssetInfo, type Theme, type Wallet, } from './types/index.js';
export * from './types/events.js';
export * from './types/config.js';
export { getPortalDomain, stringToPhoneNumber, entityToWallet } from './utils/index.js';
export { PREFIX as STORAGE_PREFIX } from './constants.js';
export { distributeNewShare } from './shares/shareDistribution.js';
export { KeyContainer } from './shares/KeyContainer.js';
export type { PlatformUtils } from './PlatformUtils.js';
export type { StorageUtils } from './StorageUtils.js';
export { getBaseUrl, initClient } from './external/userManagementClient.js';
export * as mpcComputationClient from './external/mpcComputationClient.js';
export { decryptWithKeyPair, decryptWithPrivateKey, getAsymmetricKeyPair, getPublicKeyHex, encryptWithDerivedPublicKey, encodePrivateKeyToPemHex, getDerivedPrivateKeyAndDecrypt, getPublicKeyFromSignature, getSHA256HashHex, encryptPrivateKey, decryptPrivateKey, decryptPrivateKeyAndDecryptShare, hashPasswordWithSalt, encryptPrivateKeyWithPassword, decryptPrivateKeyWithPassword, publicKeyFromHex, } from './cryptography/utils.js';
export * from './external/userManagementClient.js';
export * from './errors.js';
export * from './utils/formatting.js';
export * from './utils/polling.js';
export { isWalletSupported } from './utils/wallet.js';
export { getOnRampAssets, getOnRampNetworks, toAssetInfoArray } from './utils/onRamps.js';
export { getPortalBaseURL } from './utils/url.js';
export { retrieve as transmissionUtilsRetrieve } from './transmission/transmissionUtils.js';
export declare const paraVersion: string;
export default ParaCore;
