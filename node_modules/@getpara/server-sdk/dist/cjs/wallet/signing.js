"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ed25519Sign = exports.signMessage = exports.sendTransaction = exports.signTransaction = void 0;
const uuid = __importStar(require("uuid"));
const workerWrapper_js_1 = require("../workers/workerWrapper.js");
function signTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const workId = uuid.v4();
            const worker = yield (0, workerWrapper_js_1.setupWorker)(ctx, (sendTransactionRes) => __awaiter(this, void 0, void 0, function* () {
                resolve(sendTransactionRes);
            }), workId);
            worker.postMessage({
                env: ctx.env,
                apiKey: ctx.apiKey,
                cosmosPrefix: ctx.cosmosPrefix,
                params: { share, walletId, userId, tx, chainId },
                functionType: 'SIGN_TRANSACTION',
                offloadMPCComputationURL: ctx.offloadMPCComputationURL,
                disableWorkers: ctx.disableWorkers,
                sessionCookie,
                useDKLS: isDKLS,
                disableWebSockets: ctx.disableWebSockets,
                wasmOverride: ctx.wasmOverride,
                workId,
            });
        }));
    });
}
exports.signTransaction = signTransaction;
function sendTransaction(ctx, userId, walletId, share, tx, chainId, sessionCookie, isDKLS) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const workId = uuid.v4();
            const worker = yield (0, workerWrapper_js_1.setupWorker)(ctx, (sendTransactionRes) => __awaiter(this, void 0, void 0, function* () {
                resolve(sendTransactionRes);
            }), workId);
            worker.postMessage({
                env: ctx.env,
                apiKey: ctx.apiKey,
                params: { share, walletId, userId, tx, chainId },
                functionType: 'SEND_TRANSACTION',
                offloadMPCComputationURL: ctx.offloadMPCComputationURL,
                disableWorkers: ctx.disableWorkers,
                sessionCookie,
                useDKLS: isDKLS,
                disableWebSockets: ctx.disableWebSockets,
                wasmOverride: ctx.wasmOverride,
                workId,
            });
        }));
    });
}
exports.sendTransaction = sendTransaction;
function signMessage(ctx, userId, walletId, share, message, sessionCookie, isDKLS) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const workId = uuid.v4();
            const worker = yield (0, workerWrapper_js_1.setupWorker)(ctx, (signMessageRes) => __awaiter(this, void 0, void 0, function* () {
                resolve(signMessageRes);
            }), workId);
            worker.postMessage({
                env: ctx.env,
                apiKey: ctx.apiKey,
                params: { share, walletId, userId, message },
                functionType: 'SIGN_MESSAGE',
                offloadMPCComputationURL: ctx.offloadMPCComputationURL,
                disableWorkers: ctx.disableWorkers,
                sessionCookie,
                useDKLS: isDKLS,
                disableWebSockets: ctx.disableWebSockets,
                wasmOverride: ctx.wasmOverride,
                workId,
            });
        }));
    });
}
exports.signMessage = signMessage;
function ed25519Sign(ctx, userId, walletId, share, base64Bytes, sessionCookie) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const workId = uuid.v4();
            const worker = yield (0, workerWrapper_js_1.setupWorker)(ctx, (signMessageRes) => __awaiter(this, void 0, void 0, function* () {
                resolve(signMessageRes);
            }), workId);
            worker.postMessage({
                env: ctx.env,
                apiKey: ctx.apiKey,
                params: { share, walletId, userId, base64Bytes },
                functionType: 'ED25519_SIGN',
                offloadMPCComputationURL: ctx.offloadMPCComputationURL,
                disableWorkers: ctx.disableWorkers,
                sessionCookie,
                disableWebSockets: ctx.disableWebSockets,
                wasmOverride: ctx.wasmOverride,
                workId,
            });
        }));
    });
}
exports.ed25519Sign = ed25519Sign;
