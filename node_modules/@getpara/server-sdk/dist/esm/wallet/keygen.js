var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as uuid from 'uuid';
import { waitUntilTrue } from '@getpara/core-sdk';
import { setupWorker } from '../workers/workerWrapper.js';
function isKeygenComplete(ctx, userId, walletId) {
    return __awaiter(this, void 0, void 0, function* () {
        const wallets = yield ctx.client.getWallets(userId);
        const wallet = wallets.data.wallets.find(w => w.id === walletId);
        return !!wallet.address;
    });
}
function isPreKeygenComplete(ctx, pregenIdentifier, pregenIdentifierType, walletId) {
    return __awaiter(this, void 0, void 0, function* () {
        const wallets = yield ctx.client.getPregenWallets({ [pregenIdentifierType]: [pregenIdentifier] });
        const wallet = wallets.wallets.find(w => w.id === walletId);
        return !!(wallet === null || wallet === void 0 ? void 0 : wallet.address);
    });
}
export function keygen(ctx, userId, type, secretKey, skipDistribute = false, sessionCookie, _emailProps = {}) {
    return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
        const workId = uuid.v4();
        const worker = yield setupWorker(ctx, (res) => __awaiter(this, void 0, void 0, function* () {
            yield waitUntilTrue(() => __awaiter(this, void 0, void 0, function* () { return isKeygenComplete(ctx, userId, res.walletId); }), 15000, 1000);
            if (skipDistribute) {
                resolve({
                    signer: res.signer,
                    walletId: res.walletId,
                    recoveryShare: null,
                });
            }
        }), workId);
        worker.postMessage({
            env: ctx.env,
            apiKey: ctx.apiKey,
            cosmosPrefix: ctx.cosmosPrefix,
            params: { userId, secretKey, type },
            functionType: 'KEYGEN',
            offloadMPCComputationURL: ctx.offloadMPCComputationURL,
            disableWorkers: ctx.disableWorkers,
            sessionCookie,
            useDKLS: ctx.useDKLS,
            disableWebSockets: ctx.disableWebSockets,
            wasmOverride: ctx.wasmOverride,
            workId,
        });
    }));
}
export function preKeygen(ctx, pregenIdentifier, pregenIdentifierType, type, secretKey, _skipDistribute = false, partnerId, sessionCookie) {
    return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
        const workId = uuid.v4();
        const worker = yield setupWorker(ctx, (res) => __awaiter(this, void 0, void 0, function* () {
            yield waitUntilTrue(() => __awaiter(this, void 0, void 0, function* () { return isPreKeygenComplete(ctx, pregenIdentifier, pregenIdentifierType, res.walletId); }), 15000, 1000);
            resolve({
                signer: res.signer,
                walletId: res.walletId,
                recoveryShare: null,
            });
        }), workId);
        const email = undefined;
        const params = { pregenIdentifier, pregenIdentifierType, secretKey, partnerId, email, type };
        if (pregenIdentifierType === 'EMAIL') {
            params.email = pregenIdentifier;
        }
        worker.postMessage({
            env: ctx.env,
            apiKey: ctx.apiKey,
            cosmosPrefix: ctx.cosmosPrefix,
            params: params,
            functionType: 'PREKEYGEN',
            offloadMPCComputationURL: ctx.offloadMPCComputationURL,
            disableWorkers: ctx.disableWorkers,
            sessionCookie,
            useDKLS: ctx.useDKLS,
            disableWebSockets: ctx.disableWebSockets,
            wasmOverride: ctx.wasmOverride,
            workId,
        });
    }));
}
export function ed25519Keygen(ctx, userId, sessionCookie, _emailProps = {}) {
    return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
        const workId = uuid.v4();
        const worker = yield setupWorker(ctx, (res) => __awaiter(this, void 0, void 0, function* () {
            yield waitUntilTrue(() => __awaiter(this, void 0, void 0, function* () { return isKeygenComplete(ctx, userId, res.walletId); }), 15000, 1000);
            resolve({
                signer: res.signer,
                walletId: res.walletId,
                recoveryShare: null,
            });
        }), workId);
        worker.postMessage({
            env: ctx.env,
            apiKey: ctx.apiKey,
            cosmosPrefix: ctx.cosmosPrefix,
            params: { userId },
            functionType: 'ED25519_KEYGEN',
            disableWorkers: ctx.disableWorkers,
            sessionCookie,
            disableWebSockets: ctx.disableWebSockets,
            wasmOverride: ctx.wasmOverride,
            workId,
        });
    }));
}
export function ed25519PreKeygen(ctx, pregenIdentifier, pregenIdentifierType, sessionCookie) {
    return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
        const workId = uuid.v4();
        const worker = yield setupWorker(ctx, (res) => __awaiter(this, void 0, void 0, function* () {
            yield waitUntilTrue(() => __awaiter(this, void 0, void 0, function* () { return isPreKeygenComplete(ctx, pregenIdentifier, pregenIdentifierType, res.walletId); }), 15000, 1000);
            resolve({
                signer: res.signer,
                walletId: res.walletId,
                recoveryShare: null,
            });
        }), workId);
        const email = undefined;
        const params = { pregenIdentifier, pregenIdentifierType, email };
        if (pregenIdentifierType === 'EMAIL') {
            params.email = pregenIdentifier;
        }
        worker.postMessage({
            env: ctx.env,
            apiKey: ctx.apiKey,
            cosmosPrefix: ctx.cosmosPrefix,
            params: params,
            functionType: 'ED25519_PREKEYGEN',
            disableWorkers: ctx.disableWorkers,
            sessionCookie,
            disableWebSockets: ctx.disableWebSockets,
            wasmOverride: ctx.wasmOverride,
            workId,
        });
    }));
}
